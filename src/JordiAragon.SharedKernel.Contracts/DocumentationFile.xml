<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JordiAragon.SharedKernel.Contracts</name>
    </assembly>
    <members>
        <member name="T:JordiAragon.SharedKernel.Contracts.DependencyInjection.IIgnoreDependency">
            <summary>
            Specifies that a type in a scanned assembly will not be automatically registered.
            If not specified with this interface it will be set as a transient dependency.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Contracts.DependencyInjection.IScopedDependency">
            <summary>
            Apply this marker interface to register a service as a scoped dependency.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Contracts.DependencyInjection.ISingletonDependency">
            <summary>
            Apply this marker interface to register a service as a singleton dependency.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Contracts.DependencyInjection.ITransientDependency">
            <summary>
            Apply this marker interface to register a service as a transient dependency.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Contracts.Events.IEvent">
            <summary>
            The Event is an event that occurs within the problem (living inside a bounded context)
            and is used to communicate a change in the state of the entity or aggregate.
            This is a private event, not persisted, part of Ubiquitous Language.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Contracts.Events.IEventNotification`1">
            <summary>
            The Event Notification is an event that occurs within the problem (living inside a bounded context)
            and is used to communicate a change in the state of the entity or aggregate.
            This is a private event, persisted, part of Ubiquitous Language.
            </summary>
            <typeparam name="TEvent">Source domainEvent.</typeparam>
        </member>
    </members>
</doc>
