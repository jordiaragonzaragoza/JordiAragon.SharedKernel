<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JordiAragon.SharedKernel.Domain.Contracts</name>
    </assembly>
    <members>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IDomainEvent">
            <summary>
            The Event occurs within the problem domain (living inside a bounded context)
            and is used to communicate a change in the state of the entity.
            This is a private event part of Ubiquitous Language.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IEntity`1">
            <summary>
            Generic abstraction for a domain entity.
            </summary>
            <typeparam name="TId">The id for the entity.</typeparam>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IEntity`2">
            <summary>
            Generic abstraction for a domain entity.
            </summary>
            <typeparam name="TId">The id for the entity.</typeparam>
            <typeparam name="TIdType">The id value for the entity.</typeparam>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IEntity">
            <summary>
            Generic abstraction for a domain entity.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IEntityId`1">
            <summary>
            Generic abstraction for a entity id.
            </summary>
            <typeparam name="TIdType">The value for the entity id.</typeparam>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IEntityId">
            <summary>
            Marker interface for a entity id.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadListRepository`2">
            <summary>
            <para>
            A <see cref="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadListRepository`2" /> can be used to query instances of <typeparamref name="TEntity" />.
            </para>
            </summary>
            <typeparam name="TEntity">The type of entity being operated on by this repository.</typeparam>
            <typeparam name="TId">The type of id entity being operated on by this repository.</typeparam>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadListRepository`2.ListAsync(System.Threading.CancellationToken)">
            <summary>
            Finds all entities of <typeparamref name="TEntity" /> from the database.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadRepository`2">
            <summary>
            <para>
            A <see cref="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadRepository`2" /> can be used to query instances of <typeparamref name="TEntity" />.
            </para>
            </summary>
            <typeparam name="TEntity">The type of entity being operated on by this repository.</typeparam>
            <typeparam name="TId">The type of id entity being operated on by this repository.</typeparam>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadRepository`2.GetByIdAsync(`1,System.Threading.CancellationToken)">
            <summary>
            Finds an entity with the given primary key value.
            </summary>
            <param name="id">The value of the primary key for the entity to be found.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the <typeparamref name="TEntity" />, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.IReadRepository`2.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a boolean whether any entity exists or not.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains true if the
            source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2">
            <summary>
            <para>
            A <see cref="T:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2" /> can be used to query instances of <typeparamref name="TEntity" />.
            An <see cref="T:Ardalis.Specification.ISpecification`1"/> (or derived) is used to encapsulate the LINQ queries against the database.
            </para>
            </summary>
            <typeparam name="TEntity">The type of entity being operated on by this repository.</typeparam>
            <typeparam name="TId">The type of id entity being operated on by this repository.</typeparam>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.FirstOrDefaultAsync(Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the <typeparamref name="TEntity" />, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.FirstOrDefaultAsync``1(Ardalis.Specification.ISpecification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the <typeparamref name="TResult" />, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.SingleOrDefaultAsync(Ardalis.Specification.ISingleResultSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the <typeparamref name="TEntity" />, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.SingleOrDefaultAsync``1(Ardalis.Specification.ISingleResultSpecification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains the <typeparamref name="TResult" />, or <see langword="null"/>.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.ListAsync(Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Finds all entities of <typeparamref name="TEntity" />, that matches the encapsulated query logic of the
            <paramref name="specification"/>, from the database.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.ListAsync``1(Ardalis.Specification.ISpecification{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Finds all entities of <typeparamref name="TEntity" />, that matches the encapsulated query logic of the
            <paramref name="specification"/>, from the database.
            <para>
            Projects each entity into a new form, being <typeparamref name="TResult" />.
            </para>
            </summary>
            <typeparam name="TResult">The type of the value returned by the projection.</typeparam>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation.
            The task result contains a <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.CountAsync(Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Returns a number that represents how many entities satisfy the encapsulated query logic
            of the <paramref name="specification"/>.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the
            number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Returns the total number of records.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains the
            number of elements in the input sequence.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.AnyAsync(Ardalis.Specification.ISpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Returns a boolean that represents whether any entity satisfy the encapsulated query logic
            of the <paramref name="specification"/> or not.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
            A task that represents the asynchronous operation. The task result contains true if the
            source sequence contains any elements; otherwise, false.
            </returns>
        </member>
        <member name="M:JordiAragon.SharedKernel.Domain.Contracts.Interfaces.ISpecificationReadRepository`2.AsAsyncEnumerable(Ardalis.Specification.ISpecification{`0})">
            <summary>
            Finds all entities of <typeparamref name="TEntity" />, that matches the encapsulated query logic of the
            <paramref name="specification"/>, from the database.
            </summary>
            <param name="specification">The encapsulated query logic.</param>
            <returns>
             Returns an IAsyncEnumerable which can be enumerated asynchronously.
            </returns>
        </member>
    </members>
</doc>
