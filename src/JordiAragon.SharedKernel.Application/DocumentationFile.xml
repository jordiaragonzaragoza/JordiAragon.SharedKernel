<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JordiAragon.SharedKernel.Application</name>
    </assembly>
    <members>
        <member name="T:JordiAragon.SharedKernel.Application.Attributes.AuthorizeAttribute">
            <summary>
            Specifies the class this attribute is applied to requires authorization.
            </summary>
        </member>
        <member name="P:JordiAragon.SharedKernel.Application.Attributes.AuthorizeAttribute.Roles">
            <summary>
            Gets or sets a comma delimited list of roles that are allowed to access the resource.
            </summary>
        </member>
        <member name="P:JordiAragon.SharedKernel.Application.Attributes.AuthorizeAttribute.Policy">
            <summary>
            Gets or sets the policy name that determines access to the resource.
            </summary>
        </member>
        <member name="T:JordiAragon.SharedKernel.Application.Behaviours.DomainEventsDispatcherBehaviour`2">
            <summary>
            The deferred approach to raise and dispatch events
            Dispatch Domain Events collection in a unique atomic transaction.
            BEFORE committing data (EF SaveChanges) into the DB. This makes
            a single transaction including side effects from the domain event
            handlers that are using the same DbContext with Scope lifetime.
            Note: If an unhandled exception occurs, all the saved changes will be rolled back
            by the UnitOfWorkBehaviour. All the operations related to a domain event finish
            successfully or none of them do.
            See <a href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation#what-is-a-domain-event">this link</a> for more information.
            </summary>
            <typeparam name="TRequest">The command.</typeparam>
            <typeparam name="TResponse">The command response.</typeparam>
        </member>
        <member name="T:JordiAragon.SharedKernel.Application.Behaviours.LoggerBehaviour`1">
            <summary>
            Defined a request pre-processor for a handler.
            </summary>
            <typeparam name="TRequest">Request type.</typeparam>
        </member>
        <member name="M:JordiAragon.SharedKernel.Application.Behaviours.LoggerBehaviour`1.Process(`0,System.Threading.CancellationToken)">
            <summary>
            Process method executes before calling the Handle method on your handler.
            </summary>
            <param name="request">Incoming request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An awaitable task.</returns>
        </member>
    </members>
</doc>
